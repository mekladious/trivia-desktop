{"version":3,"sources":["img/logo.png","Components/GameSettings/GameSettings.jsx","Components/RoundResults/RoundResults.jsx","Components/FinalResults/FinalResults.jsx","Components/Question/Question.jsx","Components/Randomizer/Randomizer.jsx","Components/Welcome/Welcome.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","GameSettings","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onRoundCountChange","bind","assertThisInitialized","onTeamNameChange","state","teams_num","rounds_num","teams","event","index","target","value","setState","_this2","react_default","a","createElement","className","htmlFor","key","type","name","id","onChange","e","map","team","react_router_dom","to","Button","variant","React","Component","withRouter","RoundResults","FinalResults","Question","Randomizer","props","handleLoadData","setTimeout","position","isComplete","handleComplete","Welcome","alt","src","require","App","react_router","path","render","Components_GameSettings_GameSettings","Components_RoundResults_RoundResults","Components_FinalResults_FinalResults","Components_Question_Question","Components_Randomizer_Randomizer","Components_Welcome_Welcome","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a24d7c73.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.01e39025.png\";","import React from \"react\";\nimport { withRouter, Link } from \"react-router-dom\";\nimport { Button } from \"react-bootstrap\";\n\nclass GameSettings extends React.Component {\n\n    constructor(){\n        super();\n        this.onRoundCountChange = this.onRoundCountChange.bind(this);\n        this.onTeamNameChange = this.onTeamNameChange.bind(this);\n        this.state = {\n            teams_num: 1,\n            rounds_num: 1,\n            teams:[\n                ''\n            ]\n        }\n    }\n    onTeamNameChange(event, index){\n        // console.log(event.target.value)\n        // console.log(index)\n        let teams = this.state.teams\n        teams[index]=event.target.value\n        this.setState({teams: teams})\n    }\n\n    onRoundCountChange(event){\n        this.setState({rounds_num: event.target.value})\n    }\n\n    render() {\n        return(\n            <div className=\"Settings app-slide\">\n                <div>\n                    <label htmlFor=\"\">Number of teams</label>\n                    <div className=\"input\">\n                        <button key=\"+\">+</button>\n                    </div>\n                </div>\n                <br/>\n                <div>\n                    <label htmlFor=\"\">Number of rounds</label>\n                    <div className=\"input\">\n                        <input type=\"number\" name=\"\" id=\"\" onChange={(e)=>this.onRoundCountChange(e)} value={this.state.rounds_num}/>\n                    </div>\n                </div>\n                <br/>   \n                {this.state.teams.map((team, index)=>\n                    <div>\n                        <label htmlFor=\"\">Team ({index+1}) name</label>\n                        <br/>\n                        <div className=\"input\">\n                            <input type=\"text\" name=\"\" id=\"\" value={team} onChange={(e)=>this.onTeamNameChange(e, index)}/>\n                        </div>\n                    </div>\n                )}\n               \n                    <Link to=\"/round\">\n                    <Button className=\"submitbutton\" variant=\"primary\">\n                        START GAME\n                    </Button>\n                    </Link>\n\n        </div>\n        )\n    }\n    \n}\n\nexport default withRouter(GameSettings);","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nclass RoundResults extends React.Component {\n\n    render() {\n        return(\n            <div>\n                </div>\n        )\n    }\n}\n\nexport default withRouter(RoundResults);","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nclass FinalResults extends React.Component {\n\n    render() {\n        return(\n            <div>\n                </div>\n        )\n    }\n}\n\nexport default withRouter(FinalResults)","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nclass Question extends React.Component {\n\n    render() {\n        return(\n            <div>\n                </div>\n        )\n    }\n}\n\nexport default withRouter(Question);","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n// import LuckyWheel from 'lucky-wheel';\n\nclass Randomizer extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n          position: 0,\n          isComplete: false\n        }\n      }\n      handleLoadData = () => {\n        setTimeout(() => {\n          this.setState({\n            position: 2,\n            isComplete: true\n          })\n        }, 1000);\n      }\n      handleComplete = () => {\n        this.setState({isComplete: false})\n      }\n       \n      render() {\n        return (\n          {/* <LuckyWheel\n             onLoadData={this.handleLoadData}\n             position={this.state.position}\n             areaNum={7}\n             cycle={10}\n             isComplete={this.state.isComplete}\n             onComplete={this.handleComplete}\n          /> */}\n        )\n      }\n}\n\nexport default withRouter(Randomizer);","import React from \"react\";\nimport { withRouter,Link } from \"react-router-dom\";\nimport { Button } from 'react-bootstrap'\n\nclass Welcome extends React.Component {\n\n    render() {\n        return(\n            <div className=\"Welcome app-slide\">\n                <div className=\"image-container\">\n                    <img alt=\"\" src={require('../../img/logo.png')}  />\n                </div>\n                    <p>Welcome to trivia app</p>\n                    <h6>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec tortor dui, sollicitudin a faucibus ut, suscipit nec eros. Sed a luctus orci, eu scelerisque dolor. Sed fringilla vel nulla eget iaculis. Nam at tristique tortor. Cras eu felis vel massa commodo hendrerit. Pellentesque at leo neque. Vestibulum ipsum odio, mollis ac mauris sit amet, feugiat lacinia ex. In dolor nibh, facilisis placerat gravida a, egestas sit amet sapien. Vivamus luctus felis blandit luctus faucibus. Curabitur porttitor quis arcu a sagittis. Nam id magna vitae arcu maximus maximus eget ac lorem.</h6>\n                    <Link to=\"/settings\">\n                    <Button variant=\"primary\" >\n                        PRESS TO START\n                    </Button>\n                    </Link>\n            </div>\n        )\n    }\n    \n}\n\nexport default withRouter(Welcome);","import React, { Component } from 'react';\n// import { withRouter } from 'react-router-dom';\n// import PageTransition from 'react-router-page-transition';\nimport { Switch, Route, BrowserRouter, Link } from 'react-router-dom';\nimport { Button } from 'react-bootstrap'\n\nimport GameSettings from \"./Components/GameSettings/GameSettings\";\nimport RoundResults from \"./Components/RoundResults/RoundResults\";\nimport FinalResults from \"./Components/FinalResults/FinalResults\";\nimport Question from \"./Components/Question/Question\";\nimport Randomizer from \"./Components/Randomizer/Randomizer\";\nimport Welcome from \"./Components/Welcome/Welcome\";\nimport './App.css';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n          <BrowserRouter>\n            <Switch>\n              \n                <Route path='/settings' render={(props) => <GameSettings {...this.props} />} />\n                <Route path='/round' render={(props) => <RoundResults {...this.props} />} />\n                <Route path='/final' render={(props) => <FinalResults {...this.props} />} />\n                <Route path='/question' render={(props) => <Question {...this.props} />} />\n                <Route path='/rand' render={(props) => <Randomizer {...this.props} />} />\n\n                <Route path='/' render={(props) => <Welcome {...this.props} />} />\n            </Switch>\n          </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}